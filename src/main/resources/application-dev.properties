server.port=5000
# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "rent"
spring.datasource.url = jdbc:mysql://localhost:3306/rent

# Username and password
spring.datasource.username = root
spring.datasource.password = 

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect



# EMBEDDED SERVER CONFIGURATION
#server.contextPath=/api


# JACKSON
spring.jackson.serialization.INDENT_OUTPUT=true

# ERRORS
error.whitelabel.enabled=true

# LOGGING
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=DEBUG

# App configuration
cerberus.token.header=X-Auth-Token
cerberus.token.secret=sssshhhh!
cerberus.token.expiration=604800

# Routes
cerberus.route.authentication=auth
cerberus.route.authentication.refresh=refresh
cerberus.route.protected=protected

